{"version":3,"sources":["components/News.js","components/NewsList.js","components/Category.js","components/SourceRow.js","components/Sources.js","App.js","serviceWorker.js","index.js"],"names":["News","props","data","publishedDate","publishedAt","substring","author","newsImg","urlToImage","className","src","alt","title","aria-hidden","description","href","url","NewsList","useState","news","setNews","media","category","useEffect","fetchNews","currentMedia","map","item","source","length","URL","process","i","indexOf","fetch","then","res","json","concat","articles","filter","Fragment","key","article","Category","sources","value","onChange","opt","SourceRow","sourceName","checked","type","Sources","categorySources","id","name","includes","App","setSources","setCategory","setMedia","error","setError","fetchSources","status","catch","e","index","array","categories","event","target","clickedMedia","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.55547300.chunk.js","sourcesContent":["import React from 'react';\n\nfunction News(props) {\n  const { data } = props;\n  let publishedDate = data.publishedAt\n    ? data.publishedAt.substring(0, 10)\n    : 'Not available';\n  let author = data.author ? data.author : 'Not available';\n  let newsImg = data.urlToImage ? true : false;\n\n  return (\n    <div className=\"card\">\n      {newsImg && (\n        <img className=\"card-img-top\" src={data.urlToImage} alt={data.title} />\n      )}\n      <div className=\"card-body\">\n        <div className=\"date\">\n          <small className=\"text-muted date\">\n            <span>\n              <i className=\"fa fa-clock-o\" aria-hidden=\"true\"></i>{' '}\n              {publishedDate}\n            </span>\n          </small>\n        </div>\n        <h4 className=\"card-title\">{data.title}</h4>\n        <p className=\"card-text\">{data.description}</p>\n        <div className=\"add-info\">\n          <small className=\"text-muted\">\n            <span>\n              <i className=\"fa fa-user-o\" aria-hidden=\"true\"></i> {author}\n            </span>\n          </small>\n        </div>\n        <a className=\"btn btn-primary\" href={data.url}>\n          <i className=\"fa fa-link\" aria-hidden=\"true\"></i>\n        </a>\n      </div>\n    </div>\n  );\n}\n\nexport default News;\n","import React, { useState, useEffect } from 'react';\nimport News from './News';\n\nfunction NewsList(props) {\n  const [news, setNews] = useState([]);\n  const { media, category } = props;\n\n  useEffect(() => {\n    fetchNews(media);\n  }, [media]);\n\n  const fetchNews = (media) => {\n    // Get current sources\n    let currentMedia = news.map((item) => item.source);\n    // If media > currentMedia there is a new source\n    // Else a source was deleted\n    if (media.length > currentMedia.length) {\n      const URL = `https://newsapi.org/v2/top-headlines?apiKey=${process.env.REACT_APP_API_KEY}&sources=`;\n      // Check added source to fetch it\n      media.map((source, i) => {\n        // If source not in currentMedia fetch it\n        if (currentMedia.indexOf(source) === -1) {\n          fetch(URL + source)\n            .then((res) => res.json())\n            .then((data) => {\n              setNews(news.concat({ source: source, articles: data.articles }));\n            });\n        }\n      });\n    } else {\n      // Check unchecked source to delete it\n      currentMedia.map((source) => {\n        // If source not in media delete it\n        if (media.indexOf(source) === -1) {\n          setNews(news.filter((item) => item.source !== source));\n        }\n      });\n    }\n  };\n\n  return (\n    <div className=\"news-list\">\n      {news.map((source) => {\n        return (\n          <React.Fragment key={source.source}>\n            <h2 className=\"news-source\" key={source.source}>\n              {source.source}\n            </h2>\n            <div className=\"card-columns\">\n              {source.articles.map((article) => (\n                <News key={article.title} category={category} data={article} />\n              ))}\n            </div>\n          </React.Fragment>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default NewsList;\n","import React from 'react';\n\nfunction Category(props) {\n  const { sources, value, onChange } = props;\n\n  return (\n    <select\n      className=\"category-select custom-select form-control form-control-lg\"\n      value={value}\n      onChange={onChange}\n    >\n      {sources.map((opt, i) => (\n        <option key={i} value={opt}>\n          {opt}\n        </option>\n      ))}\n    </select>\n  );\n}\n\nexport default Category;\n","import React from 'react';\n\nfunction SourceRow(props) {\n  const { sourceName, value, checked, onChange } = props;\n\n  return (\n    <label className=\"custom-control custom-checkbox\">\n      <input\n        className=\"custom-control-input\"\n        type=\"checkbox\"\n        value={value}\n        checked={checked}\n        onChange={onChange}\n      />\n      <span className=\"custom-control-indicator\"></span>\n      {sourceName}\n    </label>\n  );\n}\n\nexport default SourceRow;\n","import React from 'react';\nimport SourceRow from './SourceRow';\n\nfunction Sources(props) {\n  const { onChange, sources, media, category } = props;\n\n  // Filter sources by selected category\n  let categorySources = sources.filter((item) => {\n    return item.category === category;\n  });\n\n  return (\n    <div className=\"sources\">\n      <ul className={`sources-list ${category}`}>\n        {categorySources.map((source) => (\n          <li key={source.id} className=\"sources-item form-check\">\n            <SourceRow\n              value={source.id}\n              sourceName={source.name}\n              checked={media.includes(source.id)}\n              onChange={onChange}\n            />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default Sources;\n","import React, { useState, useEffect } from 'react';\nimport NewsList from './components/NewsList';\nimport Category from './components/Category';\nimport Sources from './components/Sources';\n\nfunction App() {\n  // Sources retrieved by fetch\n  const [sources, setSources] = useState([]);\n  // Selected category\n  const [category, setCategory] = useState('technology');\n  // Selected sources\n  const [media, setMedia] = useState([]);\n  // Error in fetch\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    fetchSources();\n  }, []);\n\n  const fetchSources = () => {\n    const URL = `https://newsapi.org/v2/sources?language=en&apiKey=${process.env.REACT_APP_API_KEY}`;\n    fetch(URL)\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.status === 'ok') {\n          setSources(data.sources);\n        } else {\n          setError(true);\n        }\n      })\n      .catch((e) => {\n        setError(true);\n      });\n  };\n\n  const categories = (sources) => {\n    let category = sources\n      .map((item) => {\n        // Return an array with category attribute only\n        return item.category;\n      })\n      .filter((item, index, array) => {\n        // Find the index of the actual element in the array using indexOf, if both indexes are different it's a repeated element\n        return index === array.indexOf(item);\n      });\n    return category;\n  };\n\n  const handleCategoryChange = (event) => {\n    setCategory(event.target.value);\n    setMedia([]);\n  };\n\n  const handleSourceChange = (event) => {\n    // Get selected media\n    let clickedMedia = event.target.value;\n    if (event.target.checked === true) {\n      // Add new media\n      setMedia([...media, clickedMedia]);\n    } else {\n      // Delete media using filter\n      setMedia(media.filter((item) => item !== clickedMedia));\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">\n        <div className=\"app-info\">\n          <span className=\"app-developed\">\n            Designed & developed by{' '}\n            <a href=\"http://www.luciano.im/\">Luciano Muñoz</a>\n          </span>\n          <span className=\"app-code\">\n            <a href=\"https://github.com/luciano-im/nius\">\n              <i className=\"fa fa-github\" aria-hidden=\"true\"></i> View Code\n            </a>\n          </span>\n        </div>\n        <h1 className=\"app-title\">\n          <i className=\"fa fa-newspaper-o\" aria-hidden=\"true\"></i> Nius\n        </h1>\n        <span className=\"app-powered\">\n          Powered by <a href=\"https://newsapi.org/\">News API</a>\n        </span>\n        <Category\n          sources={categories(sources)}\n          value={category}\n          onChange={handleCategoryChange}\n        />\n        {error && <p className=\"error\">Request failed</p>}\n      </header>\n      <Sources\n        sources={sources}\n        category={category}\n        media={media}\n        onChange={handleSourceChange}\n      />\n      <NewsList category={category} media={media} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}